// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package kim is a generated GoMock package.
package kim

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetMeta mocks base method.
func (m *MockService) GetMeta() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockServiceMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockService)(nil).GetMeta))
}

// ServiceID mocks base method.
func (m *MockService) ServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceID indicates an expected call of ServiceID.
func (mr *MockServiceMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockService)(nil).ServiceID))
}

// ServiceName mocks base method.
func (m *MockService) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockServiceMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockService)(nil).ServiceName))
}

// MockServiceRegistration is a mock of ServiceRegistration interface.
type MockServiceRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRegistrationMockRecorder
}

// MockServiceRegistrationMockRecorder is the mock recorder for MockServiceRegistration.
type MockServiceRegistrationMockRecorder struct {
	mock *MockServiceRegistration
}

// NewMockServiceRegistration creates a new mock instance.
func NewMockServiceRegistration(ctrl *gomock.Controller) *MockServiceRegistration {
	mock := &MockServiceRegistration{ctrl: ctrl}
	mock.recorder = &MockServiceRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRegistration) EXPECT() *MockServiceRegistrationMockRecorder {
	return m.recorder
}

// DialURL mocks base method.
func (m *MockServiceRegistration) DialURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// DialURL indicates an expected call of DialURL.
func (mr *MockServiceRegistrationMockRecorder) DialURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialURL", reflect.TypeOf((*MockServiceRegistration)(nil).DialURL))
}

// GetMeta mocks base method.
func (m *MockServiceRegistration) GetMeta() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockServiceRegistrationMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockServiceRegistration)(nil).GetMeta))
}

// GetNamespace mocks base method.
func (m *MockServiceRegistration) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockServiceRegistrationMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockServiceRegistration)(nil).GetNamespace))
}

// GetProtocol mocks base method.
func (m *MockServiceRegistration) GetProtocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProtocol indicates an expected call of GetProtocol.
func (mr *MockServiceRegistrationMockRecorder) GetProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockServiceRegistration)(nil).GetProtocol))
}

// GetTags mocks base method.
func (m *MockServiceRegistration) GetTags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockServiceRegistrationMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockServiceRegistration)(nil).GetTags))
}

// PublicAddress mocks base method.
func (m *MockServiceRegistration) PublicAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockServiceRegistrationMockRecorder) PublicAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockServiceRegistration)(nil).PublicAddress))
}

// PublicPort mocks base method.
func (m *MockServiceRegistration) PublicPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublicPort indicates an expected call of PublicPort.
func (mr *MockServiceRegistrationMockRecorder) PublicPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicPort", reflect.TypeOf((*MockServiceRegistration)(nil).PublicPort))
}

// ServiceID mocks base method.
func (m *MockServiceRegistration) ServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceID indicates an expected call of ServiceID.
func (mr *MockServiceRegistrationMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockServiceRegistration)(nil).ServiceID))
}

// ServiceName mocks base method.
func (m *MockServiceRegistration) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockServiceRegistrationMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockServiceRegistration)(nil).ServiceName))
}

// String mocks base method.
func (m *MockServiceRegistration) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockServiceRegistrationMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockServiceRegistration)(nil).String))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// DialURL mocks base method.
func (m *MockServer) DialURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// DialURL indicates an expected call of DialURL.
func (mr *MockServerMockRecorder) DialURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialURL", reflect.TypeOf((*MockServer)(nil).DialURL))
}

// GetMeta mocks base method.
func (m *MockServer) GetMeta() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockServerMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockServer)(nil).GetMeta))
}

// GetNamespace mocks base method.
func (m *MockServer) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockServerMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockServer)(nil).GetNamespace))
}

// GetProtocol mocks base method.
func (m *MockServer) GetProtocol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProtocol indicates an expected call of GetProtocol.
func (mr *MockServerMockRecorder) GetProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockServer)(nil).GetProtocol))
}

// GetTags mocks base method.
func (m *MockServer) GetTags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockServerMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockServer)(nil).GetTags))
}

// PublicAddress mocks base method.
func (m *MockServer) PublicAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockServerMockRecorder) PublicAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockServer)(nil).PublicAddress))
}

// PublicPort mocks base method.
func (m *MockServer) PublicPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublicPort indicates an expected call of PublicPort.
func (mr *MockServerMockRecorder) PublicPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicPort", reflect.TypeOf((*MockServer)(nil).PublicPort))
}

// Push mocks base method.
func (m *MockServer) Push(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockServer)(nil).Push), arg0, arg1)
}

// ServiceID mocks base method.
func (m *MockServer) ServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceID indicates an expected call of ServiceID.
func (mr *MockServerMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockServer)(nil).ServiceID))
}

// ServiceName mocks base method.
func (m *MockServer) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockServerMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockServer)(nil).ServiceName))
}

// SetAcceptor mocks base method.
func (m *MockServer) SetAcceptor(arg0 Acceptor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAcceptor", arg0)
}

// SetAcceptor indicates an expected call of SetAcceptor.
func (mr *MockServerMockRecorder) SetAcceptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAcceptor", reflect.TypeOf((*MockServer)(nil).SetAcceptor), arg0)
}

// SetChannelMap mocks base method.
func (m *MockServer) SetChannelMap(arg0 ChannelMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetChannelMap", arg0)
}

// SetChannelMap indicates an expected call of SetChannelMap.
func (mr *MockServerMockRecorder) SetChannelMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChannelMap", reflect.TypeOf((*MockServer)(nil).SetChannelMap), arg0)
}

// SetMessageListener mocks base method.
func (m *MockServer) SetMessageListener(arg0 MessageListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMessageListener", arg0)
}

// SetMessageListener indicates an expected call of SetMessageListener.
func (mr *MockServerMockRecorder) SetMessageListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageListener", reflect.TypeOf((*MockServer)(nil).SetMessageListener), arg0)
}

// SetReadWait mocks base method.
func (m *MockServer) SetReadWait(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadWait", arg0)
}

// SetReadWait indicates an expected call of SetReadWait.
func (mr *MockServerMockRecorder) SetReadWait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadWait", reflect.TypeOf((*MockServer)(nil).SetReadWait), arg0)
}

// SetStateListener mocks base method.
func (m *MockServer) SetStateListener(arg0 StateListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateListener", arg0)
}

// SetStateListener indicates an expected call of SetStateListener.
func (mr *MockServerMockRecorder) SetStateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateListener", reflect.TypeOf((*MockServer)(nil).SetStateListener), arg0)
}

// Shutdown mocks base method.
func (m *MockServer) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServer)(nil).Shutdown), arg0)
}

// Start mocks base method.
func (m *MockServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start))
}

// String mocks base method.
func (m *MockServer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockServerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockServer)(nil).String))
}

// MockAcceptor is a mock of Acceptor interface.
type MockAcceptor struct {
	ctrl     *gomock.Controller
	recorder *MockAcceptorMockRecorder
}

// MockAcceptorMockRecorder is the mock recorder for MockAcceptor.
type MockAcceptorMockRecorder struct {
	mock *MockAcceptor
}

// NewMockAcceptor creates a new mock instance.
func NewMockAcceptor(ctrl *gomock.Controller) *MockAcceptor {
	mock := &MockAcceptor{ctrl: ctrl}
	mock.recorder = &MockAcceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcceptor) EXPECT() *MockAcceptorMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockAcceptor) Accept(arg0 Conn, arg1 time.Duration) (string, Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Accept indicates an expected call of Accept.
func (mr *MockAcceptorMockRecorder) Accept(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockAcceptor)(nil).Accept), arg0, arg1)
}

// MockMessageListener is a mock of MessageListener interface.
type MockMessageListener struct {
	ctrl     *gomock.Controller
	recorder *MockMessageListenerMockRecorder
}

// MockMessageListenerMockRecorder is the mock recorder for MockMessageListener.
type MockMessageListenerMockRecorder struct {
	mock *MockMessageListener
}

// NewMockMessageListener creates a new mock instance.
func NewMockMessageListener(ctrl *gomock.Controller) *MockMessageListener {
	mock := &MockMessageListener{ctrl: ctrl}
	mock.recorder = &MockMessageListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageListener) EXPECT() *MockMessageListenerMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockMessageListener) Receive(arg0 Agent, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Receive", arg0, arg1)
}

// Receive indicates an expected call of Receive.
func (mr *MockMessageListenerMockRecorder) Receive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockMessageListener)(nil).Receive), arg0, arg1)
}

// MockStateListener is a mock of StateListener interface.
type MockStateListener struct {
	ctrl     *gomock.Controller
	recorder *MockStateListenerMockRecorder
}

// MockStateListenerMockRecorder is the mock recorder for MockStateListener.
type MockStateListenerMockRecorder struct {
	mock *MockStateListener
}

// NewMockStateListener creates a new mock instance.
func NewMockStateListener(ctrl *gomock.Controller) *MockStateListener {
	mock := &MockStateListener{ctrl: ctrl}
	mock.recorder = &MockStateListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateListener) EXPECT() *MockStateListenerMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockStateListener) Disconnect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockStateListenerMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockStateListener)(nil).Disconnect), arg0)
}

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// GetMeta mocks base method.
func (m *MockAgent) GetMeta() Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(Meta)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockAgentMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockAgent)(nil).GetMeta))
}

// ID mocks base method.
func (m *MockAgent) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAgentMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAgent)(nil).ID))
}

// Push mocks base method.
func (m *MockAgent) Push(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockAgentMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockAgent)(nil).Push), arg0)
}

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Flush mocks base method.
func (m *MockConn) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockConnMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockConn)(nil).Flush))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), b)
}

// ReadFrame mocks base method.
func (m *MockConn) ReadFrame() (Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrame")
	ret0, _ := ret[0].(Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrame indicates an expected call of ReadFrame.
func (mr *MockConnMockRecorder) ReadFrame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrame", reflect.TypeOf((*MockConn)(nil).ReadFrame))
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnMockRecorder) SetDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockConnMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockConnMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), b)
}

// WriteFrame mocks base method.
func (m *MockConn) WriteFrame(arg0 OpCode, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrame indicates an expected call of WriteFrame.
func (mr *MockConnMockRecorder) WriteFrame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrame", reflect.TypeOf((*MockConn)(nil).WriteFrame), arg0, arg1)
}

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannel)(nil).Close))
}

// Flush mocks base method.
func (m *MockChannel) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockChannelMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockChannel)(nil).Flush))
}

// GetMeta mocks base method.
func (m *MockChannel) GetMeta() Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(Meta)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockChannelMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockChannel)(nil).GetMeta))
}

// ID mocks base method.
func (m *MockChannel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockChannelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockChannel)(nil).ID))
}

// LocalAddr mocks base method.
func (m *MockChannel) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockChannelMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockChannel)(nil).LocalAddr))
}

// Push mocks base method.
func (m *MockChannel) Push(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockChannelMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockChannel)(nil).Push), arg0)
}

// Read mocks base method.
func (m *MockChannel) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockChannelMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockChannel)(nil).Read), b)
}

// ReadFrame mocks base method.
func (m *MockChannel) ReadFrame() (Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrame")
	ret0, _ := ret[0].(Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrame indicates an expected call of ReadFrame.
func (mr *MockChannelMockRecorder) ReadFrame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrame", reflect.TypeOf((*MockChannel)(nil).ReadFrame))
}

// Readloop mocks base method.
func (m *MockChannel) Readloop(lst MessageListener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readloop", lst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Readloop indicates an expected call of Readloop.
func (mr *MockChannelMockRecorder) Readloop(lst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readloop", reflect.TypeOf((*MockChannel)(nil).Readloop), lst)
}

// RemoteAddr mocks base method.
func (m *MockChannel) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockChannelMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockChannel)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockChannel) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockChannelMockRecorder) SetDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockChannel)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockChannel) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockChannelMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockChannel)(nil).SetReadDeadline), t)
}

// SetReadWait mocks base method.
func (m *MockChannel) SetReadWait(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadWait", arg0)
}

// SetReadWait indicates an expected call of SetReadWait.
func (mr *MockChannelMockRecorder) SetReadWait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadWait", reflect.TypeOf((*MockChannel)(nil).SetReadWait), arg0)
}

// SetWriteDeadline mocks base method.
func (m *MockChannel) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockChannelMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockChannel)(nil).SetWriteDeadline), t)
}

// SetWriteWait mocks base method.
func (m *MockChannel) SetWriteWait(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteWait", arg0)
}

// SetWriteWait indicates an expected call of SetWriteWait.
func (mr *MockChannelMockRecorder) SetWriteWait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteWait", reflect.TypeOf((*MockChannel)(nil).SetWriteWait), arg0)
}

// Write mocks base method.
func (m *MockChannel) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockChannelMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockChannel)(nil).Write), b)
}

// WriteFrame mocks base method.
func (m *MockChannel) WriteFrame(arg0 OpCode, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrame indicates an expected call of WriteFrame.
func (mr *MockChannelMockRecorder) WriteFrame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrame", reflect.TypeOf((*MockChannel)(nil).WriteFrame), arg0, arg1)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockClient) Connect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect), arg0)
}

// GetMeta mocks base method.
func (m *MockClient) GetMeta() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockClientMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockClient)(nil).GetMeta))
}

// Read mocks base method.
func (m *MockClient) Read() (Frame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(Frame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClientMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClient)(nil).Read))
}

// Send mocks base method.
func (m *MockClient) Send(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), arg0)
}

// ServiceID mocks base method.
func (m *MockClient) ServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceID indicates an expected call of ServiceID.
func (mr *MockClientMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockClient)(nil).ServiceID))
}

// ServiceName mocks base method.
func (m *MockClient) ServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockClientMockRecorder) ServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockClient)(nil).ServiceName))
}

// SetDialer mocks base method.
func (m *MockClient) SetDialer(arg0 Dialer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDialer", arg0)
}

// SetDialer indicates an expected call of SetDialer.
func (mr *MockClientMockRecorder) SetDialer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDialer", reflect.TypeOf((*MockClient)(nil).SetDialer), arg0)
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// DialAndHandshake mocks base method.
func (m *MockDialer) DialAndHandshake(arg0 DialerContext) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialAndHandshake", arg0)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialAndHandshake indicates an expected call of DialAndHandshake.
func (mr *MockDialerMockRecorder) DialAndHandshake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndHandshake", reflect.TypeOf((*MockDialer)(nil).DialAndHandshake), arg0)
}

// MockFrame is a mock of Frame interface.
type MockFrame struct {
	ctrl     *gomock.Controller
	recorder *MockFrameMockRecorder
}

// MockFrameMockRecorder is the mock recorder for MockFrame.
type MockFrameMockRecorder struct {
	mock *MockFrame
}

// NewMockFrame creates a new mock instance.
func NewMockFrame(ctrl *gomock.Controller) *MockFrame {
	mock := &MockFrame{ctrl: ctrl}
	mock.recorder = &MockFrameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrame) EXPECT() *MockFrameMockRecorder {
	return m.recorder
}

// GetOpCode mocks base method.
func (m *MockFrame) GetOpCode() OpCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpCode")
	ret0, _ := ret[0].(OpCode)
	return ret0
}

// GetOpCode indicates an expected call of GetOpCode.
func (mr *MockFrameMockRecorder) GetOpCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpCode", reflect.TypeOf((*MockFrame)(nil).GetOpCode))
}

// GetPayload mocks base method.
func (m *MockFrame) GetPayload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPayload indicates an expected call of GetPayload.
func (mr *MockFrameMockRecorder) GetPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockFrame)(nil).GetPayload))
}

// SetOpCode mocks base method.
func (m *MockFrame) SetOpCode(arg0 OpCode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpCode", arg0)
}

// SetOpCode indicates an expected call of SetOpCode.
func (mr *MockFrameMockRecorder) SetOpCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpCode", reflect.TypeOf((*MockFrame)(nil).SetOpCode), arg0)
}

// SetPayload mocks base method.
func (m *MockFrame) SetPayload(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayload", arg0)
}

// SetPayload indicates an expected call of SetPayload.
func (mr *MockFrameMockRecorder) SetPayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockFrame)(nil).SetPayload), arg0)
}
