package router

import (
	"api-service/handler"
	"github.com/spf13/viper"
	"net/http"

	_ "api-service/docs" // docs is generated by Swag CLI, you have to import it.
	"api-service/router/middleware"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {

	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)

	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// swagger api docs
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// pprof router
	pprof.Register(g)

	// API version
	v := g.Group("/" + viper.GetString("version"))

	// api for authentication functionalities
	v.POST("/login", handler.Login)

	// The user handlers, authentication required in release mode
	u := v.Group("/user")
	//if viper.Get("mode") == "release" {
	//	u.Use(middleware.AuthMiddleware())
	//}
	u.Use(middleware.AuthMiddleware())
	{
		u.POST("", handler.Create)
		u.DELETE("/:id", handler.Delete)
		u.PUT("/:id", handler.Update)
		u.GET("", handler.List)
		u.GET("/:username", handler.Get)
	}

	// The health check handlers
	svcd := v.Group("/monitor")
	{
		svcd.GET("/health", handler.HealthCheck)
		svcd.GET("/disk", handler.DiskCheck)
		svcd.GET("/cpu", handler.CPUCheck)
		svcd.GET("/ram", handler.RAMCheck)
	}

	return g
}
